Waveshark 2-Channel RS232 HAT install and setup

This document details the installation and software setup 
process enabling use of the waveshark 2-channel rs232 HAT
on a Raspberry Pi 4+.

Hardware
	- CM5 Installation
	- 
Software
	- Pi
		- Open a terminal.
		- Run the command
				sudo apt update
			and verify successful completion.
		- Firmware configuration:
			- Open the firmware config file for edit: 
					sudo nano /boot/firmware/config.txt
			- Uncomment the following line:
					#dtparam=spi=on
				- Note: the docs did not include this step, but I'm super smart.
			- Add the following lines:
					# waveshark rs232 HAT configuration
					dtoverlay=sc16is752-spi1,int_pin=24
			- Press Ctrl+X to quit (case sensitive) and save your changes.
			- Reboot the Pi.
	  - Verify the SC16IS752 driver has been loaded:
	    - Run the command 
	    			ls /dev
	    		to verify the presence of the following devices:
	        - gpiochip4
	            - note: the docs reference "gpiochip3", which is incorrect as of 04Sep2025.
	        - ttySC0 (serial channel 1)
	        - ttySC1 (serial channel 2)
	  - Install support libraries:
	    - Install wiringpi:
        - Note: wiringpi was deprecated in 2019 and cannot be installed per the docs:
        			https://www.waveshare.com/wiki/2-CH_RS232_HAT#Install_Libraries
        - Download the package:
          - Note: I used version 3.16. The docs state to use 2.52 because 
            this is when wiringpi was updated for the Pi 4B. However, the 
            project was taken over by the community and I proceeded to use 
            the latest version in testing.
          - Run the commands:
              cd /tmp
              wget https://github.com/WiringPi/WiringPi/releases/download/3.16/wiringpi_3.16_arm64.deb
              sudo dpkg -i wiringpi_3.16_arm64.deb
          - Run the command 
              gpio-v 
            and verify the output contains the correct version number.
			- Install python 3 support
				- Note: waveshark kinda assumes they're the center of your raspberry
				  flavored world here by installing packages system wide. That works
				  for now, but it may not play well with future OS changes (e.g. venv's).
				- Note: install instructions have been updated for python 3. Original:
				  		https://www.waveshare.com/wiki/2-CH_RS232_HAT#Install_Libraries
				- Note: we should be using a python virtual environment to avoid 
				  conflicts with apt. Python 3 doesn't like system wide pip installs. 
				- Run the commands
						sudo apt install python3-serial
				    python -m pip install RPi.GPIO --break-system-packages
				- Note: I assume the presence of pip3 and python3-serial was already present.
        
# Test
  - Setup: 
    - Test PC (transmitter, )
      - Note: these instructions work on Linux. I'll get you a Windows
        version, but it'll be something very similar to the below. 
      - Connect a USB to RS232 serial adapter from the PC into channel 1 of the RS232 HAT.
		  - Run the command
			  		sudo apt update && sudo apt install minicom
			  	to install minicom
		  - Find the serial port:
			  		ls /dev/ttyUSB*
			  - most likely to show up as /dev/ttyUSB0 if no other USB devices are present.
		  - Note: future sections assume the usb to serial port to be at ttyUSB0.
		  - ! Complete Pi setup below before continuing.
				- Install minicom
				    sudo apt install minicom
				- Start a minicom session
				    sudo minicom -D /dev/ttyUSB0 -b 115200
				- Begin typing and verify what is entered is echoed in the terminal of the Pi.
    - Pi
      - Note: the test code provided by waveshark is strictly python 2,
        in a few places. I forked and updated the code, we'll move it later. 
      - Run the command
          git clone https://github.com/edswangren/ws-rs232-test
        to pull the test code repository.
      - Run the commands
          cd ws-rs232-test/python/examples
          sudo python main.py /dev/ttySC0
        to start the receive loop.
      - Note: by default, channel 1 will be assigned /dev/ttySC0 and channel
        2 /dev/ttySC1. The above assumes that as well as communication over 
        channel 1. If this is incorrect, run ls /dev/ttySC* and find the correct
        device to pass to main.py above.
